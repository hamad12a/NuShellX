interface tqli
    module  procedure tqli4,tqli8,tqli16
end interface tqli

interface  pythag
    module  procedure pythag4,pythag8,pythag16
end interface pythag

interface  tred2
    module procedure tred24,tred28,tred216
end interface tred2

interface  indexx
    module  procedure indexx4,indexx8,indexx16
end interface indexx

contains

      PURE SUBROUTINE tqli16(d,e,n,np,z,maxiter)
      INTEGER,INTENT(in):: n,np
      REAL(kind=16),INTENT(inout):: d(:),e(:),z(:,:)
      integer,intent(in)::maxiter
!U    USES pythag
      INTEGER i,k,l,m
      REAL(kind=16) b,c,dd,f,g,p,r,s
      do 11 i=2,n
        e(i-1)=e(i)
11    continue
      e(n)=real(0,16)
      do 15 l=1,n
        iter=0
1       do 12 m=l,n-1
          dd=abs(d(m))+abs(d(m+1))
          if (abs(e(m))+dd.eq.dd) goto 2
12      continue
        m=n
2       if(m.ne.l)then
          if(iter.eq.maxiter) then
!          print *, ' Too many iterations in tqli'
!          stop !pause 'too many iterations in tqli'
                return
          end if
          iter=iter+1
          g=(d(l+1)-d(l))/(real(2,16)*e(l))
          r=pythag(g,real(1,16))
          g=d(m)-d(l)+e(l)/(g+sign(r,g))
          s=real(1,16)
          c=real(1,16)
          p=real(0,16)
          do 14 i=m-1,l,-1
            f=s*e(i)
            b=c*e(i)
            r=pythag(f,g)
            e(i+1)=r
            if(r.eq.0.)then
              d(i+1)=d(i+1)-p
              e(m)=real(0,16)
              goto 1
            endif
            s=f/r
            c=g/r
            g=d(i+1)-p
            r=(d(i)-g)*s+real(2,16)*c*b
            p=s*r
            d(i+1)=g+p
            g=c*r-b
!     Omit lines from here ...
            do 13 k=1,n
              f=z(k,i+1)
              z(k,i+1)=s*z(k,i)+c*f
              z(k,i)=c*z(k,i)-s*f
13          continue
!     ... to here when finding only eigenvalues.
14        continue
          d(l)=d(l)-p
          e(l)=g
          e(m)=real(0,16)
          goto 1
        endif
15    continue
      return
      END SUBROUTINE tqli16
!  (C) Copr. 1986-92 Numerical Recipes Software 7$-i%.
      PURE FUNCTION pythag16(a,b)
      REAL(kind=16),intent(in):: a,b
      REAL(kind=16) absa,absb,pythag16
      absa=abs(a)
      absb=abs(b)
      if(absa.gt.absb)then
        pythag16=absa*sqrt(1.+(absb/absa)**2)
      else
        if(absb.eq.real(0,16))then
          pythag16=real(0,16)
        else
          pythag16=absb*sqrt(real(1,16)+(absa/absb)**2)
        endif
      endif
      return
      END FUNCTION pythag16
!  (C) Copr. 1986-92 Numerical Recipes Software 7$-i%.
      PURE SUBROUTINE tred216(a,n,np,d,e)
      INTEGER,intent(in):: n,np
      REAL(kind=16),intent(inout):: a(:,:),d(:),e(:)
      INTEGER i,j,k,l
      REAL(kind=16) f,g,h,hh,scale
      do 18 i=n,2,-1
        l=i-1
        h=real(0,16)
        scale=real(0,16)
        if(l.gt.1)then
          do 11 k=1,l
            scale=scale+abs(a(i,k))
11        continue
          if(scale.eq.real(0,16))then
            e(i)=a(i,l)
          else
            do 12 k=1,l
              a(i,k)=a(i,k)/scale
              h=h+a(i,k)**2
12          continue
            f=a(i,l)
            g=-sign(sqrt(h),f)
            e(i)=scale*g
            h=h-f*g
            a(i,l)=f-g
            f=real(0,16)
            do 15 j=1,l
!     Omit following line if finding only eigenvalues
              a(j,i)=a(i,j)/h
              g=real(0,16)
              do 13 k=1,j
                g=g+a(j,k)*a(i,k)
13            continue
              do 14 k=j+1,l
                g=g+a(k,j)*a(i,k)
14            continue
              e(j)=g/h
              f=f+e(j)*a(i,j)
15          continue
            hh=f/(h+h)
            do 17 j=1,l
              f=a(i,j)
              g=e(j)-hh*f
              e(j)=g
              do 16 k=1,j
                a(j,k)=a(j,k)-f*e(k)-g*a(i,k)
16            continue
17          continue
          endif
        else
          e(i)=a(i,l)
        endif
        d(i)=h
18    continue
!     Omit following line if finding only eigenvalues.
      d(1)=real(0,16)
      e(1)=real(0,16)
      do 24 i=1,n
!     Delete lines from here ...
        l=i-1
        if(d(i).ne.real(0,4))then
          do 22 j=1,l
            g=real(0,16)
            do 19 k=1,l
              g=g+a(i,k)*a(k,j)
19          continue
            do 21 k=1,l
              a(k,j)=a(k,j)-g*a(k,i)
21          continue
22        continue
        endif
!     ... to here when finding only eigenvalues.
        d(i)=a(i,i)
!     Also delete lines from here ...
        a(i,i)=real(1,16)
        do 23 j=1,l
          a(i,j)=real(0,16)
          a(j,i)=real(0,16)
23      continue
!     ... to here when finding only eigenvalues.
24    continue
      return
      END SUBROUTINE tred216
!  (C) Copr. 1986-92 Numerical Recipes Software 7$-i%.
      PURE SUBROUTINE indexx16(n,arr,indx)
      INTEGER ,INTENT(IN)::n
      INTEGER, INTENT(OUT):: indx(n)
      REAL(kind=16),intent(in):: arr(n)
      INTEGER i,indxt,ir,itemp,j,jstack,k,l,istack(NSTACK)
      REAL(kind=16) a
      do 11 j=1,n
        indx(j)=j
11    continue
      jstack=0
      l=1
      ir=n
1     if(ir-l.lt.M)then
        do 13 j=l+1,ir
          indxt=indx(j)
          a=arr(indxt)
          do 12 i=j-1,1,-1
            if(arr(indx(i)).le.a)goto 2
            indx(i+1)=indx(i)
12        continue
          i=0
2         indx(i+1)=indxt
13      continue
        if(jstack.eq.0)return
        ir=istack(jstack)
        l=istack(jstack-1)
        jstack=jstack-2
      else
        k=(l+ir)/2
        itemp=indx(k)
        indx(k)=indx(l+1)
        indx(l+1)=itemp
        if(arr(indx(l+1)).gt.arr(indx(ir)))then
          itemp=indx(l+1)
          indx(l+1)=indx(ir)
          indx(ir)=itemp
        endif
        if(arr(indx(l)).gt.arr(indx(ir)))then
          itemp=indx(l)
          indx(l)=indx(ir)
          indx(ir)=itemp
        endif
        if(arr(indx(l+1)).gt.arr(indx(l)))then
          itemp=indx(l+1)
          indx(l+1)=indx(l)
          indx(l)=itemp
        endif
        i=l+1
        j=ir
        indxt=indx(l)
        a=arr(indxt)
3       continue
          i=i+1
        if(arr(indx(i)).lt.a)goto 3
4       continue
          j=j-1
        if(arr(indx(j)).gt.a)goto 4
        if(j.lt.i)goto 5
        itemp=indx(i)
        indx(i)=indx(j)
        indx(j)=itemp
        goto 3
5       indx(l)=indx(j)
        indx(j)=indxt
        jstack=jstack+2
        if(jstack.gt.NSTACK) RETURN
        if(ir-i+1.ge.j-l)then
          istack(jstack)=ir
          istack(jstack-1)=i
          ir=j-1
        else
          istack(jstack)=j-1
          istack(jstack-1)=l
          l=i
        endif
      endif
      goto 1
      END SUBROUTINE indexx16
!  (C) Copr. 1986-92 Numerical Recipes Software 7$-i%.
